<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Consulting AWS engineer and proponent of simplicity with a focus on highly scalable cloud infrastructure</description>
    <link>https://mijndertstuij.nl/</link>
    <atom:link href="https://mijndertstuij.nl/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 31 Aug 2018 08:56:43 -0500</pubDate>
    <lastBuildDate>Fri, 31 Aug 2018 08:56:43 -0500</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Run Ghost in Docker behind Nginx</title>
        <description>&lt;p&gt;To me installing and upgrading Ghost is way too hard. Using Docker it’s a little more manageable. Launching a Docker container with Ghost is easy - first you have to install Docker (I’m using Ubuntu).&lt;!-- more --&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt install docker.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a user to run your Docker container as and add that user to the Docker group:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;useradd -s /bin/bash -m mijndert -d /home/mijndert
usermod -aG docker mijndert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make the Docker container stateless and store the data locally, create a folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir /home/mijndert/ghost
chown -R mijndert:www-data /home/mijndert/ghost
chmod -R 0770 /home/mijndert/ghost
chmod g+s /home/mijndert/ghost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that you can run the Docker container:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name ghost --restart always -e url=http://mijndertstuij.nl -p 2368:2368 -v /home/mijndert/ghost:/var/lib/ghost/content ghost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The restart always flag ensures that your Docker container will always start when the Docker daemon launches.&lt;/p&gt;

&lt;p&gt;To make sure Nginx acts as a reverse proxy, add this to your virtual host config:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location / {
    	proxy_pass                          http://localhost:2368;
    	proxy_set_header  Host              $http_host;   # required for docker client's sake
    	proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
    	proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
    	proxy_set_header  X-Forwarded-Proto $scheme;
    	proxy_read_timeout                  900;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 11 Jan 2018 05:24:59 -0600</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/run-ghost-in-docker-behind-nginx/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/run-ghost-in-docker-behind-nginx/</guid>
        
        
      </item>
    
      <item>
        <title>Nginx cheatsheet</title>
        <description>&lt;p&gt;I good while back I wrote some stuff about Nginx on an internal wiki. At that time the company was converting from using Apache to Nginx and not everyone was up to speed. I dubbed the wiki entry the &lt;em&gt;Nginx Cheatsheet&lt;/em&gt;. I recently unearthed this fine piece of writing and I’m re-posting it here so more people might benefit from the effort.&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&quot;simple-vhost&quot;&gt;Simple vhost&lt;/h2&gt;

&lt;p&gt;The most simple vhost I can think of:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
   listen 80;
   server_name domain.nl www.domain.nl;
   root /home/DOMAIN/www;
   index index.html;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;limit-accesibility&quot;&gt;Limit accesibility&lt;/h2&gt;

&lt;h3 id=&quot;by-username&quot;&gt;By username&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Location / {
    auth_basic &quot;Login for &amp;lt;BLABLA&amp;gt;&quot;;
    auth_basic_user_file /home/BLABLA.htpasswd
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;by-ip-address&quot;&gt;By IP address&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Location / {
    satisfy any;
    allow 1.2.3.4;
    deny all;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;by-either-username-or-ip-address&quot;&gt;By either username or IP address&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Location / {
    satisfy any;
    auth_basic &quot;Login for &amp;lt;BLABLA&amp;gt;&quot;;
    auth_basic_user_file /home/BLABLA.htpasswd
    allow 1.2.3.4;
    deny all;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fastcgi&quot;&gt;FastCGI&lt;/h2&gt;

&lt;p&gt;The most basic way to connect Nginx to FastCGI is this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location ~ \.(hh|php)$ {
   root /home/USERNAME/www;
   include /etc/nginx/fastcgi_params;
   fastcgi_pass 127.0.0.1:9000;
   try_files $uri=404;
   fastcgi_index index.php;
   fastcgi_param SCRIPT_FILENAME /home/USERNAME/www$fastcgi_script_name;
   fastcgi_param PATH_TRANSLATED /home/USERNAME/www$fastcgi_script_name;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More on tweaking FastCGI settings in &lt;em&gt;DoS prevention&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;redirects&quot;&gt;Redirects&lt;/h2&gt;

&lt;p&gt;If you want to have one or more domain names to redirect to another it’s really easy to do so. Way easier than Apache anyway.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
   listen       80;
   server_name  olddomain.nl www.olddomain.nl;
   return       301 http://www.DOMAINNAME.nl$request_uri;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also do some neat things with regex:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Server-wide redirect
rewrite ^/example/something/?.* http://DOMAIN.nl/example permanent;
# Location-specific redirect
location /example/something/ {
  rewrite /example/something/(.*)$ http://DOMAIN.nl/$1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you can ‘if’ your way out of a rewrite, for example when ?post_type is included in the URI:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location ~ ^/feed$ { if ($arg_post_type = &quot;&quot;) { rewrite ^/rss2/?$http://feedpress.me/example redirect; } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Redirect all traffic to HTTPS:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ($scheme = 'http') {
     rewrite ^ https://$host$request_uri? permanent;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fastcgi-caching&quot;&gt;FastCGI caching&lt;/h2&gt;

&lt;p&gt;First you’ll need to add a cache path to the top of your vhost:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastcgi_cache_path /var/cache/nginx/DOMAIN levels=1:2 keys_zone=DOMAIN:100m inactive=60m;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also add a header to check whether your requests is cached or not. You’ll either get HIT (you’re cached), MISS (it was not in cache, will be next time!) or BYPASS (something is forcing your request not to be cached) as returned values.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-Cache $upstream_cache_status;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enable caching and have query strings and POST requests always go to PHP:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# fastcgi_cache start
set $no_cache 0;

# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {
   set $no_cache 1;
}

if ($query_string != &quot;&quot;) {
   set $no_cache 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can make exceptions for certain query strings that you do want to have cached:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# don't cache pages which have these query strings as arg
if ( $arg_utm_campaign != &quot;&quot; ) { set $no_cache 0; }
if ( $arg_utm_medium != &quot;&quot; ) { set $no_cache 0; }
if ( $arg_utm_source != &quot;&quot; ) { set $no_cache 0; }
if ( $arg_gclid != &quot;&quot; ) { set $no_cache 0; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should make exceptions for certain pages you don’t want to have cached, like /login and /admin. Also, when a user has a cookie because he/she is logged in.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Don't cache uris containing the following segments
if ($request_uri ~* &quot;(/wp-admin/|/xmlrpc.php||sitemap(_index)?.xml)&quot; {
   set $no_cache 1;
}

# Don't use the cache for logged in users or recent commenters
if ($http_cookie ~* &quot;comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in&quot;) {
   set $no_cache 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to actually have PHP output be cached, you’ll need to add this to your ‘Location’ for .php files:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastcgi_cache_bypass $no_cache;
fastcgi_no_cache $no_cache;
fastcgi_cache DOMAIN;
fastcgi_cache_valid 200 302 60m; # WARNING: only use high valids if cache purge module is used
fastcgi_cache_valid 404 1m; # keep 404 low
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to disable caching for whatever reason you only have to set no_cache to 1:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set $no_cache 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to remove entries from the FastCGI cache you’ll need to use the ngx_cache_purge module. This allows certain IP’s to call for example http://domain.nl/purge/about. There’s a plugin for WordPress that does this automatically for you upon editting posts and pages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location ~ /purge(/.*) {
   allow 127.0.0.1;
   allow 1.2.3.4;
   deny all;
   fastcgi_cache_purge DOMAIN &quot;$scheme$request_method$host$1&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sub-domains&quot;&gt;Sub-domains&lt;/h2&gt;

&lt;p&gt;In Apache you can use ServerAlias to add more domain names to a vhost. Nginx doesn’t have any of that because it’s confusing. In Nginx you just add more stuff behind ServerName.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ServerName domain.nl domain.com domain.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also have all sub-domains (and the zone apex itself) of a certain zone apex pointing into a vhost by adding just one entry to ServerName:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ServerName .domain.nl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will match domain.nl, www.domain.nl, bob.domain.nl, example.domain.nl, etc.&lt;/p&gt;

&lt;h2 id=&quot;userdir&quot;&gt;Userdir&lt;/h2&gt;

&lt;p&gt;Nginx does not natively support userdirs, but it can be done by using regex captures.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location ~ ^/~(.+?)(/.*)?$ {
   alias /home/$1/www$2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may get 403 Forbidden when you just put the snippet above into your nginx configuration, because by default nginx does not allow autoindex. If you would like it to behave more like the default Apache userdir, add two lines as below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location ~ ^/~(.+?)(/.*)?$ {
   alias /home/$1/www$2;
   index  index.php index.html;
   autoindex on;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dos-prevention&quot;&gt;DoS prevention&lt;/h2&gt;

&lt;p&gt;In order to prevent people, or processes, from completely flooding FastCGI with requests and filling the buffers, we add some sensible defaults to the FastCGI settings.&lt;/p&gt;

&lt;p&gt;The following tries to prevent hanging FastCGI processes, full buffers and request flooding:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastcgi_intercept_errors on;
fastcgi_ignore_client_abort off;
fastcgi_connect_timeout 60;
fastcgi_send_timeout 180;
fastcgi_read_timeout 180;
fastcgi_buffer_size 128k;
fastcgi_buffers 4 256k;
fastcgi_busy_buffers_size 256k;
fastcgi_temp_file_write_size 256k;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;deny-execution-of-php-files&quot;&gt;Deny execution of PHP files&lt;/h2&gt;

&lt;p&gt;To prevent the execution of .php files in the uploads directory in WordPress’ case you can add the following to your vhost:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location ~* /(?:uploads|files)/.*\.php$ {
  deny all;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a security measure. Sometimes a plugin is broken and allows an attacker to upload .php files. These files will usually end up in wp-content/uploads.&lt;/p&gt;

&lt;h2 id=&quot;performance-tweaks&quot;&gt;Performance tweaks&lt;/h2&gt;

&lt;h3 id=&quot;enable-gzip&quot;&gt;Enable gzip&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gzip                      on;
gzip_min_length           1100;
gzip_buffers              4 32k;
gzip_vary                 on;
gzip_http_version         1.0;
gzip_comp_level           5; # 5 has best overall compression vs slightly higher cpu. Depending on server load this can be set to 4.
gzip_proxied              any;
gzip_types                text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript application/json;
gzip_disable              &quot;MSIE [1-6]\.(?!.*SV1)&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enable-open-file-cache&quot;&gt;Enable open file cache&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open_file_cache           max=200000 inactive=2h;
open_file_cache_errors    on;
open_file_cache_min_uses  2;
open_file_cache_valid     1h;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;open-file-limits&quot;&gt;Open file limits&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# set open fd limit to 81920
worker_rlimit_nofile 81920; # must be equal or higher as 'worker_processes' * 'worker_connections'
events {
   worker_connections 10240; # 'worker_processes' * 'worker_connections' cannot exceed 'worker_rlimit_nofile'
   use epoll;
   multi_accept on;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ssl&quot;&gt;SSL&lt;/h2&gt;
&lt;p&gt;More on using SSL with Nginx can be found &lt;a href=&quot;https://mijndertstuij.nl/writing/posts/letsencrypt-ssl-nginx/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://127.0.0.1:4000/writing/posts/using-acme.sh-to-issue-lets-encrypt-certificates/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;work-with-me-here-okay&quot;&gt;Work with me here, okay?&lt;/h2&gt;

&lt;p&gt;If you see anything that’s outdated or otherwise broken, please open a pull request on &lt;a href=&quot;https://github.com/mijndert/mijndertstuij.nl&quot;&gt;my repository&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Jul 2017 06:24:59 -0500</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/nginx-cheatsheet/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/nginx-cheatsheet/</guid>
        
        
      </item>
    
      <item>
        <title>Using Acme.sh to issue Let's Encrypt certificates</title>
        <description>&lt;p&gt;Some time ago &lt;a href=&quot;https://mijndertstuij.nl/writing/posts/letsencrypt-ssl-nginx/&quot;&gt;I wrote about&lt;/a&gt; how to use &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; certificates to get an A+ on the &lt;a href=&quot;https://www.ssllabs.com/ssltest/&quot;&gt;SSL Labs test&lt;/a&gt;. Back then the only way to obtain and manage certificates was &lt;a href=&quot;https://certbot.eff.org/&quot;&gt;CertBot&lt;/a&gt;. I always thought that solution made it a hassle to manage multiple certificates. My friend &lt;a href=&quot;https://jorijn.com/&quot;&gt;Jorijn&lt;/a&gt; brought &lt;a href=&quot;https://github.com/Neilpang/acme.sh&quot;&gt;acme.sh&lt;/a&gt; to my attention, a new way to issue and manage Let’s Encrypt certificates. It was time for me to revisit the topic. &lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-acmesh&quot;&gt;What is acme.sh?&lt;/h2&gt;

&lt;p&gt;Acme.sh is an ACME protocol client written purely in Shell (Unix shell) language so there are no dependencies other than having a shell (Bash, Dash, sh). It’s the simplest yet most complete way to manage Let’s Encrypt certificates.&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;p&gt;To install acme.sh you can wget or curl the script from the internet and execute it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl https://get.acme.sh | sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wget -O -  https://get.acme.sh | sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course it’s a horrible idea to just execute a script on your machine using root credentials. Be sure to check out the script before and decide for yourself.&lt;/p&gt;

&lt;p&gt;The script will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create and copy acme.sh to your home dir &lt;code class=&quot;highlighter-rouge&quot;&gt;($HOME): ~/.acme.sh/&lt;/code&gt;. All certs will be placed in this folder too.&lt;/li&gt;
  &lt;li&gt;Create alias for: &lt;code class=&quot;highlighter-rouge&quot;&gt;acme.sh=~/.acme.sh/acme.sh&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create daily cron job to check and renew the certs if needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also pull the code from git and execute the script from there:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/Neilpang/acme.sh.git
cd ./acme.sh
./acme.sh --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You don’t have to be root but it is recommended.&lt;/p&gt;

&lt;h2 id=&quot;stateless&quot;&gt;Stateless&lt;/h2&gt;

&lt;p&gt;There are multiple ways to prove ownership of a domain using Acme.sh: standalone mode, using Apache or Nginx, DNS, or &lt;a href=&quot;https://github.com/Neilpang/acme.sh/wiki/Stateless-Mode&quot;&gt;stateless&lt;/a&gt;. In my opinion the stateless mode is by far the easiest.&lt;/p&gt;

&lt;p&gt;I’ve been using Nginx exclusively for 6 years so I’m going to give you the Nginx version. But this can also work with just about any webserver on the market today.&lt;/p&gt;

&lt;p&gt;First get your account key thumbprint:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acme.sh --register-account&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we can configure Nginx to return the account key thumbprint:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
...
  location ~ &quot;^/\.well-known/acme-challenge/([-_a-zA-Z0-9]+)$&quot; {
    default_type text/plain;
    return 200 &quot;$1.YOURTHUMBPRINT&quot;;
  }
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURTHUMBPRINT&lt;/code&gt; with the key that you got back when you registered. Restart Nginx after making these changes.&lt;/p&gt;

&lt;h2 id=&quot;issue--copy&quot;&gt;Issue &amp;amp; copy&lt;/h2&gt;

&lt;p&gt;Issue a certificate for example.com:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acme.sh --issue -d example.com -d www.example.com  --stateless&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a directory in which to copy your certificates for use by Nginx. I used &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/certificates&lt;/code&gt; but you can use anything you like really.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;acme.sh --install-cert -d example.com \
--keypath       /etc/nginx/certificates/example.com.key  \
--fullchainpath /etc/nginx/certificates/example.com.pem \
--reloadcmd     &quot;service nginx force-reload&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-your-vhost&quot;&gt;Configure your vhost&lt;/h2&gt;

&lt;p&gt;Now we can insert the SSL certificate into your vhost:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
...
  listen 443 ssl;
  listen [::]:443 ssl;

  ssl_certificate /etc/nginx/certificates/example.com.pem;
  ssl_certificate_key /etc/nginx/certificates/example.com.key;

  if ($scheme = http) {
    return 301 https://$server_name$request_uri;
  }
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take a look at my &lt;a href=&quot;https://mijndertstuij.nl/writing/posts/letsencrypt-ssl-nginx/&quot;&gt;previous article on this topic&lt;/a&gt; for more information on how to configure Nginx for SSL usage.&lt;/p&gt;

&lt;h2 id=&quot;congratulations&quot;&gt;Congratulations&lt;/h2&gt;

&lt;p&gt;You now have a very easy way to issue new Let’s Encrypt certificates. Every certificate will automatically be renewed if needed so it’s fire-and-forgot from now on. Of course there’s way more options in Acme.sh than I could ever cover on my website, so please &lt;a href=&quot;https://github.com/Neilpang/acme.sh/wiki&quot;&gt;read the wiki&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Mar 2017 03:49:05 -0500</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/using-acme.sh-to-issue-lets-encrypt-certificates/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/using-acme.sh-to-issue-lets-encrypt-certificates/</guid>
        
        
      </item>
    
      <item>
        <title>Mobile</title>
        <description>&lt;p&gt;Some people know that I don’t really care what platform I’m on, as long as I have access to some sort of shell and a &lt;a href=&quot;http://brew.sh/&quot;&gt;decent package manager&lt;/a&gt;. Because of that it’s constantly in the back of my mind that I should be able to move platforms at any given time. I don’t like lock-in, but sometimes there is no other option. One example of lock-in that I experience is my use of 1password, which lacks a native Linux client. If I were to switch to Linux tomorrow I would have to run 1password in &lt;a href=&quot;https://www.winehq.org/&quot;&gt;Wine&lt;/a&gt;, or use it on the web, neither of which are ideal. &lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;I’ve been using a lot of platforms in the past. Currently I’m using macOS and iOS for just about everything. Mostly because my employer gave me a 15 inch MacBook Pro, which is a really nice machine. The vertical integration of iOS and macOS has quite a few advantages in terms of productivity and portability. I also like timely software updates, which you don’t really get on Android unless you buy a Nexus phone.&lt;/p&gt;

&lt;p&gt;One thing I liked about Android is that it has less of an opinion on where you store your data and which services you use. It feels like a more open platform, while the integration with iCloud is huge on iOS. Again, I like the openness of Android because it allows me to move to a different platform more easily.&lt;/p&gt;

&lt;p&gt;Of course, all of this vertical integration on my current platform of choice doesn’t mean there aren’t any ways around it. That’s why I’ve been using &lt;a href=&quot;https://photos.google.com/&quot;&gt;Google Photos&lt;/a&gt; to offload photos on my iPhone to the cloud. I haven’t yet granted Google Photos permission to remove photos from my iPhone after they have been uploaded, I’m not that brave. I did try iCloud Photo Library before, but it was confusing as hell. I didn’t like how all of my photos were suddenly syncing to my other devices, while I just want to view them directly off of the iCloud servers. Someone might be able to explain the entire thing to me, but I think photo synchronization should be easier than setting it up once and leave it there.&lt;/p&gt;

&lt;p&gt;Google has been taking my iPhone over in other ways. I’ve been using Google Apps for almost everything for several years now, and so does my employer. That’s why both of those accounts are in the Gmail and Google Calendar apps, which are both superior to the Apple alternatives in my opinion. I’m also a heavy user of Google Maps because I’m on the road all the time and traffic jams are horrible in The Netherlands. Again this app is superior to what Apple has on offer; Google usually suggests better routes in heavy traffic.&lt;/p&gt;

&lt;p&gt;I’m very invested in the Google ecosystem so one might ask why I’m still using an iPhone. The two main reasons are: &lt;a href=&quot;https://support.apple.com/en-us/HT204681&quot;&gt;Continuity&lt;/a&gt; and apps.&lt;/p&gt;

&lt;p&gt;I’m a heavy user of Continuity, enabling me to take calls on my MacBook Pro, taking over the state of an app I have open in my iPhone, and set up a WiFi hotspot right from macOS.&lt;/p&gt;

&lt;p&gt;App design is great on iOS. There are a lot of apps that I use just because they look great and have awesome UX: &lt;a href=&quot;http://tapbots.com/tweetbot/&quot;&gt;Tweetbot&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/AlienBlue/&quot;&gt;Alien Blue&lt;/a&gt;, &lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt;, &lt;a href=&quot;https://overcast.fm/&quot;&gt;Overcast&lt;/a&gt;, and more. All other apps on my iPhone are function over form. I need apps for navigation, music, podcasts, parking meters, banking apps. My iPhone is like a mini office, a true workhorse on which I depend daily. And it’s holding up great so far.&lt;/p&gt;

&lt;p&gt;I will always be working towards using more open standards and services that are available cross-platform, just because no one knows what Apple might do in the future. Maybe the next MacBook Pro won’t appeal to me so I will need to move quickly. So far though, I’m quite happy in Camp Apple with a side of Google.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Sep 2016 00:04:21 -0500</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/mobile/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/mobile/</guid>
        
        
      </item>
    
      <item>
        <title>Installing the AWS Cloudwatch Logs Agent on Ubuntu 16.04</title>
        <description>&lt;p&gt;Not only can &lt;a href=&quot;https://aws.amazon.com/cloudwatch/&quot;&gt;AWS Cloudwatch&lt;/a&gt; alert you of problems with your resources, it can also store your log files and make them accesible in the AWS web interface. To make &lt;a href=&quot;http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/WhatIsCloudWatchLogs.html&quot;&gt;AWS Cloudwatch Logs&lt;/a&gt; work you’ll need to install a small agent on your EC2 instances. Currently AWS has support for CentOS, RHEL, Amazon Linux and Ubuntu 12.04 and 14.04, among some other distributions.&lt;/p&gt;

&lt;p&gt;The newest LTS version of Ubuntu, &lt;a href=&quot;http://releases.ubuntu.com/16.04/&quot;&gt;16.04&lt;/a&gt;, isn’t on the list of supported versions yet. As Ubuntu switched to &lt;a href=&quot;https://www.freedesktop.org/wiki/Software/systemd/&quot;&gt;Systemd&lt;/a&gt; for their default init system you’ll run into some trouble getting the Cloudwatch Logs Agent service started.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;installing-cloudwatch-logs-agent&quot;&gt;Installing Cloudwatch Logs Agent&lt;/h3&gt;

&lt;p&gt;Amazon provides a small installer for the agent.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python awslogs-agent-setup.py &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; MY_REGION
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where MY_REGION is the region your EC2 instances are running in, for example eu-west-1.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-service-to-run&quot;&gt;Getting the service to run&lt;/h3&gt;

&lt;p&gt;Because Amazon doesn’t provide support for Ubuntu 16.04 yet there also isn’t a Systemd unit file yet. I created one myself.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;The CloudWatch Logs agent
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rc-local.service

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;KillMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;process
&lt;span class=&quot;nv&quot;&gt;TimeoutSec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;infinity
&lt;span class=&quot;nv&quot;&gt;PIDFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/awslogs/state/awslogs.pid
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/awslogs/bin/awslogs-agent-launcher.sh &lt;span class=&quot;nt&quot;&gt;--start&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--background&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--pidfile&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PIDFILE&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; awslogs &lt;span class=&quot;nt&quot;&gt;--chuid&lt;/span&gt; awslogs &amp;amp;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure the service will start itself on boot and start the Agent.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;awslogs.service
systemctl start awslogs.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ansible&quot;&gt;Ansible&lt;/h3&gt;

&lt;p&gt;To make installing and configuring the agent just a little easier I made an Ansible role available that will do all of this for you. You can pull the code from &lt;a href=&quot;https://github.com/mijndert/ansible-cloudwatch-logs-agent&quot;&gt;the GitHub repository&lt;/a&gt;. Of course improvements are welcome via a pull request.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jun 2016 00:04:21 -0500</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/cloudwatch-logs-agent-ubuntu-1604/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/cloudwatch-logs-agent-ubuntu-1604/</guid>
        
        
      </item>
    
      <item>
        <title>Export and import AWS Cloudsearch data</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/cloudsearch/&quot;&gt;AWS CloudSearch&lt;/a&gt; is a highly scalable and reliable solution to implement search in your application or website. You can feed your search data into the service and never have to worry about performance or in any way scaling it to fit your needs. AWS CloudSearch supports about 34 languages and &lt;a href=&quot;https://aws.amazon.com/cloudsearch/details/&quot;&gt;features&lt;/a&gt; such as highlighting, autocomplete and geospatial search.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;One downside though is that there’s currently no easy way of exporting your data out of AWS CloudSearch. You might want to have the same exact data in your production account after playing with the service in your sandbox account. After a few tries I figured out how to export the data and import it back into a new CloudSearch domain.&lt;/p&gt;

&lt;p&gt;I’m assuming you already have a new CloudSearch domain set up and ready to go.&lt;/p&gt;

&lt;h3 id=&quot;exporting-the-data&quot;&gt;Exporting the data&lt;/h3&gt;

&lt;p&gt;AWS CloudSearch can be accessed by HTTP(S) as you might already know. You can use that to our advantage to create some ugly output of our data.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://&amp;lt;cloudsearch-domainname&amp;gt;-&amp;lt;cloudsearch-id&amp;gt;.&amp;lt;region&amp;gt;.cloudsearch.amazonaws.com/2013-01-01/search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;matchall&amp;amp;size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;600&amp;amp;q.parser&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;structured
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find the first part of that URL in the AWS web console. Let’s break the other parts down.&lt;/p&gt;

&lt;p&gt;You should append &lt;code class=&quot;highlighter-rouge&quot;&gt;2013-01-01&lt;/code&gt; if you use the 2013 API version for CloudSearch. To get all results I used &lt;code class=&quot;highlighter-rouge&quot;&gt;search?q=matchall&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;size=600&lt;/code&gt; to ask for 600 items. If you have more items change this number to the desired amount. To get actual structured JSON I pass &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;q.parser=structured&lt;/code&gt; as the last argument.&lt;/p&gt;

&lt;p&gt;Now that you have our results in a browser window (or curl) you can copy-paste this into a new JSON file, for example output.json.&lt;/p&gt;

&lt;h3 id=&quot;working-with-the-json&quot;&gt;Working with the JSON&lt;/h3&gt;

&lt;p&gt;Unfortunantly the JSON you have now isn’t yet ready to import back into CloudSearch. You need to modify a few things here and there.&lt;/p&gt;

&lt;h4 id=&quot;readability&quot;&gt;Readability&lt;/h4&gt;

&lt;p&gt;The make the JSON a little more readable you need to lint it. The fastest way I found is using a little utility called &lt;a href=&quot;https://github.com/jmhodges/jsonpp&quot;&gt;jsonpp&lt;/a&gt;. You can install it on a Mac using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install jsonpp&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To create a file with readable JSON you can do:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jsonpp output.json &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; output_pretty.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;modifying-the-json-file&quot;&gt;Modifying the JSON file&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;First you need to get rid of the first part of the JSON, for me it looked something like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;status&quot;:{&quot;rid&quot;:&quot;&amp;lt;some ID&amp;gt;&quot;,&quot;time-ms&quot;:2},&quot;hits&quot;:{&quot;found&quot;:576,&quot;start&quot;:0,&quot;hit&quot;:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now get rid of the last two curly brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;}}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Make sure the JSON has a &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt; at the beginning and &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt;at the end so it’s all one big array&lt;/li&gt;
  &lt;li&gt;Use the search &amp;amp; replace function of your editor to replace all occurrences &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;fields&quot;: {&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;type&quot; : &quot;add&quot; ,&quot;fields&quot;: {&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That last step is important because it tells CloudWatch you want to add these records to the domain.&lt;/p&gt;

&lt;h3 id=&quot;importing-the-data&quot;&gt;Importing the data&lt;/h3&gt;

&lt;p&gt;Now that you have our JSON all cleaned up you can start importing the data into our new CloudSearch domain using the AWS-CLI tools:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws cloudsearchdomain &lt;span class=&quot;nt&quot;&gt;--endpoint-url&lt;/span&gt; https://&amp;lt;cloudsearch-domainname&amp;gt;-&amp;lt;cloudsearch-id&amp;gt;.&amp;lt;region&amp;gt;.cloudsearch.amazonaws.com upload-documents &lt;span class=&quot;nt&quot;&gt;--content-type&lt;/span&gt; application/json &lt;span class=&quot;nt&quot;&gt;--documents&lt;/span&gt; ./output_pretty.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 01 Apr 2016 03:04:21 -0500</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/exporting-cloudsearch-data/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/exporting-cloudsearch-data/</guid>
        
        
      </item>
    
      <item>
        <title>An A+ SSL setup using Nginx and Letsencrypt</title>
        <description>&lt;p&gt;Back in 2014 I wrote about getting an &lt;a href=&quot;https://mijndertstuij.nl/posts/getting-a-on-ssllabs-with-nginx-startssl/&quot;&gt;A+ on SSL Labs using StartSSL&lt;/a&gt;. Much has changed since then, for starters we can now use the awesome &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Letsencrypt&lt;/a&gt; to get our certificates.&lt;/p&gt;

&lt;p&gt;Letsencrypt is completely free, just like StartSSL, but it will only give out certificates that are valid for 90 days. Luckily you can renew your certificate just as easily as creating one.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Let’s talk about how to configure Nginx to get that precious A+ on &lt;a href=&quot;https://www.ssllabs.com/ssltest/analyze.html&quot;&gt;SSL Labs&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-letsencrypt&quot;&gt;Setting up Letsencrypt&lt;/h3&gt;

&lt;p&gt;First we need to install Letsencrypt. Well, not really because there’s nothing to install. Letsencrypt is very portable.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/letsencrypt/letsencrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;requesting-a-certificate&quot;&gt;Requesting a certificate&lt;/h3&gt;

&lt;p&gt;There’s a few ways to request a certificate because it needs to be verified during the request process. Because I already have a web server running on port 80 I use the webroot method which places a small file in your webroot.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh /root/letsencrypt/letsencrypt-auto certonly &lt;span class=&quot;nt&quot;&gt;--webroot&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--webroot-path&lt;/span&gt; /the/path/of/my/webroot &lt;span class=&quot;nt&quot;&gt;--domains&lt;/span&gt; domain.xyz,www.domain.xyz,my.domain.xyz &lt;span class=&quot;nt&quot;&gt;--agree-tos&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--email&lt;/span&gt; foo@bar.xyz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will request a certificate and put it in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live/domain.xyz&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;generating-dh-params&quot;&gt;Generating DH params&lt;/h3&gt;

&lt;p&gt;Before actually configuring Nginx we’ll need to set up our &lt;a href=&quot;https://wiki.openssl.org/index.php/Diffie-Hellman_parameters&quot;&gt;DH params&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl dhparam &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; /etc/nginx/dhparam.pem 4096
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setting-up-nginx&quot;&gt;Setting up Nginx&lt;/h3&gt;

&lt;p&gt;Put this in your Nginx.conf or something that’s included.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_session_timeout 1d&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_session_cache shared:SSL:10m&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_session_tickets off&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Diffie-Hellman parameter for DHE ciphersuites&lt;/span&gt;
ssl_dhparam /etc/nginx/dhparam.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

ssl_protocols TLSv1.1 TLSv1.2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_ciphers &lt;span class=&quot;s1&quot;&gt;'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_prefer_server_ciphers on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)&lt;/span&gt;
add_header Strict-Transport-Security max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;15768000&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# OCSP Stapling&lt;/span&gt;
ssl_stapling on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_stapling_verify on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## verify chain of trust of OCSP response using Root CA and Intermediate certs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# actual chain is in each vhost&lt;/span&gt;
resolver 8.8.8.8 8.8.4.4 &lt;span class=&quot;nv&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;86400&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
resolver_timeout 10&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vhost-configuration&quot;&gt;Vhost configuration&lt;/h3&gt;

&lt;p&gt;I’ll assume you already have a vhost set up and we’re just going to add the SSL configuration.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listen 443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

ssl_certificate /etc/letsencrypt/live/domain.xyz/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_certificate_key /etc/letsencrypt/live/domain.xyz/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ssl_trusted_certificate /etc/letsencrypt/live/domain.xyz/chain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; http&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;301 https://&lt;span class=&quot;nv&quot;&gt;$server_name$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-result&quot;&gt;The result&lt;/h3&gt;

&lt;p&gt;To test your set up you can go to &lt;a href=&quot;https://www.ssllabs.com/ssltest/analyze.html&quot;&gt;SSL Labs&lt;/a&gt;. You should be getting an A+.&lt;/p&gt;

&lt;h3 id=&quot;renewing-a-certificate&quot;&gt;Renewing a certificate&lt;/h3&gt;

&lt;p&gt;The letsencrypt-auto binary has a renew account which I use in a cron job. It will loop through all of your certificates and check if a renewal is pending.&lt;/p&gt;

&lt;p&gt;I recommend you run this command every week to make sure all of your certificates renew in time.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh /root/letsencrypt/letsencrypt-auto renew &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; service nginx reload &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/var/log/renew.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 03:04:21 -0500</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/letsencrypt-ssl-nginx/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/letsencrypt-ssl-nginx/</guid>
        
        
      </item>
    
      <item>
        <title>Generate CloudFormation templates using Python</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/cloudtools/troposphere&quot;&gt;Troposphere&lt;/a&gt; is a Python library which makes it easier to write and maintain &lt;a href=&quot;https://aws.amazon.com/cloudformation/&quot;&gt;CloudFormation&lt;/a&gt; templates. From the README:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The troposphere library allows for easier creation of the AWS CloudFormation JSON by writing Python code to describe the AWS resources. Troposphere also includes some basic support for OpenStack resources via heat.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To facilitate catching CloudFormation or JSON errors early the library has property and type checking built into the classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;Troposphere can be easily installed inside a &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtualenv&lt;/a&gt; with &lt;em&gt;pip install troposphere&lt;/em&gt;. It’s also probably a good idea to make sure you can &lt;a href=&quot;http://mijndertstuij.nl/quickly-switch-accounts-using-aws-cli/&quot;&gt;switch AWS accounts&lt;/a&gt; quickly on the CLI. This is needed when we want to run Ansible playbooks against CloudFormation. More on that later.&lt;/p&gt;

&lt;p&gt;Let’s get to some examples.&lt;/p&gt;

&lt;h3 id=&quot;imports&quot;&gt;Imports&lt;/h3&gt;

&lt;p&gt;Every Troposphere file has to start with a few &lt;em&gt;imports&lt;/em&gt; and a description.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;troposphere&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetAtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetAZs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tags&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;troposphere&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;__author__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mijndert Stuij'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenerateRDSInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RDS instance in existing VPC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;params&quot;&gt;Params&lt;/h3&gt;

&lt;p&gt;After that we will put in a few &lt;em&gt;params&lt;/em&gt; which we will with data using Ansible later on. Here’s a parameter for the name of the CloudFormation stack.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stackname_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;stackname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Environment Name (default: StackNameNotDefined)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StackNameNotDefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s a param for the name of a database. Notice the constraints we can use.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;dbname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyDatabase&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The database name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MinLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MaxLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AllowedPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[a-zA-Z][a-zA-Z0-9]*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ConstraintDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;must begin with a letter and contain only&quot;&lt;/span&gt;
                           &lt;span class=&quot;s&quot;&gt;&quot; alphanumeric characters.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-an-rds-instance&quot;&gt;Creating an RDS instance&lt;/h3&gt;

&lt;p&gt;Here’s an example of a Troposphere template which will create a CloudFormation JSON file that will launch an RDS instance. We’ll give the RDS a name, assign some storage and a subnet, and we will say that its engine should be MySQL 5.6.&lt;/p&gt;

&lt;p&gt;Notice the &lt;em&gt;ref&lt;/em&gt; being used in some places. You can &lt;em&gt;ref&lt;/em&gt; to a &lt;em&gt;param&lt;/em&gt; to get its value returned.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rdsinstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;rdsinstance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DBName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AllocatedStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dballocatedstorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DBInstanceClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MySQL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EngineVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5.6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MasterUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbuser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MasterUserPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbpassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DBSubnetGroupName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbsubnetgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VPCSecurityGroups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbsecuritygroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MultiAZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AutoMinorVersionUpgrade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BackupRetentionPeriod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StorageType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gp2&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;outputs&quot;&gt;Outputs&lt;/h3&gt;

&lt;p&gt;CloudFormation allows us to give some output after CloudFormation is done doing its business. In this case we will &lt;em&gt;join&lt;/em&gt; some data together to create a JDBC connection string. You can copy-paste this into the configuration of your application, obviously.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;JDBCConnectionString&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JDBC connection string for database&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;jdbc:mysql://&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GetAtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rdsinstance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Endpoint.Address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GetAtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rdsinstance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Endpoint.Port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;return-json&quot;&gt;Return JSON&lt;/h3&gt;

&lt;p&gt;Notice how in the beginning of this tutorial we did &lt;code class=&quot;highlighter-rouge&quot;&gt;t = Template()&lt;/code&gt;? To generate the CloudFormation JSON file we’ll need to write the result of our Troposphere code to valid JSON. Troposphere will do this for us, of course.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenerateRDSInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'../cfm/rds.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JSON written&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;

&lt;p&gt;Here’s the results of our hard work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mijndert/9e0587f6b188f641def7&quot;&gt;Troposphere template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mijndert/c6af61fed8b6427313dc&quot;&gt;CloudFormation JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some documentation on functions can be found on &lt;a href=&quot;http://nullege.com/codes/search/troposphere&quot;&gt;Nullege&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ansible&quot;&gt;Ansible&lt;/h3&gt;

&lt;p&gt;To make it easy to fill in the blanks on those &lt;em&gt;params&lt;/em&gt; I use Ansible. Ansible can talk to CloudFormation to either run new CloudFormation stacks, or destroy them completely.&lt;/p&gt;

&lt;p&gt;This is the last step in this tutorial. Again, Ansible will fill in our &lt;em&gt;params&lt;/em&gt; using Ansible’s &lt;em&gt;vars&lt;/em&gt; function and then we tell Ansible to run a CloudFormation task using our JSON file.&lt;/p&gt;

&lt;p&gt;This allows you to run the same JSON file again and again by just changing some variables in an Ansible playbook.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ansible-playbook -i localhost-inventory ansible/rds.yml&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gather_facts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;False&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MyAccountName&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stackname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;RDS&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myDatabase&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dbuser&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myUser&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dbpassword&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myPassword&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dbclass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;db.t2.small&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dballocatedstorage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sourcesg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sg-1234567&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vars_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../var/MyAccountName.yml&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run rds cfm template&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cloudformation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;stack_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;../cfm/rds.json&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;template_parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;stackname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;vpcid&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;prsubnets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;pusubnets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dbuser&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dbpassword&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dbclass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dballocatedstorage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;sourcesg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Stackname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Ltd.&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rds&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;show output&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;var=rds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 10 Nov 2015 13:37:55 -0600</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/generate-cloudformation-templates-using-python/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/generate-cloudformation-templates-using-python/</guid>
        
        
      </item>
    
      <item>
        <title>How to solve Apt-get waiting for headers</title>
        <description>&lt;p&gt;Sometimes you play around with some third-party repositories on your Debian-based Linux box, only to find out apt-get hangs while &lt;em&gt;waiting for headers&lt;/em&gt;. Really annoying.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;You can regenerate the apt-get list cache by executing the following steps.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get clean
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/lib/apt
&lt;span class=&quot;nb&quot;&gt;sudo mv &lt;/span&gt;lists lists.old
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; lists/partial
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get clean
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That should fix the issue and you should have &lt;em&gt;apt-get update&lt;/em&gt; working again. If it did, you can safely remove &lt;em&gt;/var/lib/apt/lists.old/&lt;/em&gt; from your system.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2015 14:30:03 -0500</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/how-to-solve-apt-get-waiting-for-headers/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/how-to-solve-apt-get-waiting-for-headers/</guid>
        
        
      </item>
    
      <item>
        <title>Resize the root volume of an Azure VM</title>
        <description>&lt;p&gt;Every &lt;a href=&quot;http://azure.microsoft.com/nl-nl/services/virtual-machines/&quot;&gt;Azure virtual machine&lt;/a&gt; comes with a certain amount of storage for it’s root volume, plus a few hundred GigaBytes of &lt;em&gt;instance storage&lt;/em&gt; which will get deleted if you reboot the VM. For storing data you can either create a new disk and attach it to your VM, or you can resize the root volume with a little trick I learned.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We’re going to use &lt;a href=&quot;http://clumsyleaf.com/products/cloudxplorer&quot;&gt;Cloudxplorer&lt;/a&gt; to do the actual resizing of a disk attached to an Ubuntu VM, so you’ll need to install that first.&lt;/p&gt;

&lt;p&gt;The first step is to log in to the &lt;a href=&quot;https://manage.windowsazure.com/&quot;&gt;Azure Portal&lt;/a&gt; and stop the VM you want to edit. Wait for the VM to properly stop before doing anything else.&lt;/p&gt;

&lt;p&gt;Now have a look at the storage account in which your VHD resides and click “Manage Access Keys”. Take note of the &lt;em&gt;storage account name&lt;/em&gt; and &lt;em&gt;primary access key&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/azure-resize-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Cloudxplorer choose &lt;em&gt;Accounts &amp;gt; New &amp;gt; Azure Blobs Account&lt;/em&gt; and insert your storage account name* and &lt;em&gt;primary access key&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/azure-resize-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once your storage account shows up, right-click the VHD you want to resize and choose &lt;em&gt;break lease&lt;/em&gt;. This will decouple the VHD from the VM. Right-click the VHD again and choose &lt;em&gt;expand virtual disk&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/azure-resize-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the resize operation is done you can right-click the VHD to &lt;em&gt;acquire lease&lt;/em&gt; and attach the VHD to the VM again. In the Azure Portal you can then start the VM.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;source: &lt;a href=&quot;http://www.ms4u.info/2014/03/how-to-expand-virtual-disk-in-windows.html&quot;&gt;http://www.ms4u.info/2014/03/how-to-expand-virtual-disk-in-windows.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Mar 2015 06:40:59 -0500</pubDate>
        <link>https://mijndertstuij.nl/writing/posts/resize-the-root-volume-of-an-azure-vm/</link>
        <guid isPermaLink="true">https://mijndertstuij.nl/writing/posts/resize-the-root-volume-of-an-azure-vm/</guid>
        
        
      </item>
    
  </channel>
</rss>
